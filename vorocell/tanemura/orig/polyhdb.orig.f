      PROGRAM POLYDB
*
C         << ADD COMMENTS FOR BOUNDED CASE: DATE 1989/11/21  M.T.  >>
C          << VERSION OF BOUNDED CUBIC BOX: DATE 1989/11/17  M.T.  >>
C           << VERSION OF DOUBLE PRECISION  DATE 1987/07/29  M.T.  >>
C
***********************************************************************
*  IMPORTANT NOTICE TO USERS OF <POLYHDB.FORT>:    1989/11/17 M.T.    *
*            IN THIS PROGRAM, THE FOLLOWING FEATURE IS ADDED AS       *
*            COMPARED WITH ITS PREVIOUS VERSION <POLYHD.FORT>.        *
*   ## PLEASE READ THIS PART OF DOCUMENT BEFORE USING THE PROGRAM. ## *
*---------------------------------------------------------------------*
*  A NEW FEATURE:                                                     *
*       THE VORONOI TESSELLATION OF PARTICLE SYSTEM WHICH ARE         *
*       BOUNDED BY A CUBIC (OR A RECTANGULAR PARALLEL PIPED)          *
*       BOX WILL BE ALSO PERFORMED; THUS, THE VORONOI POLYHEDRON      *
*       OF A PARTICLE NEAR THE BOUNDARIES OF THE BOX MAY BE           *
*       BOUNDED BY THE WALLS OF THE BOX.                              *
*                                                                     *
*  THIS FEATURE WILL BE SELECTED BY A SWITCH PARAMETER <<IBOUND>>:    *
*       IF IBOUND == 1, THEN THE BOUNDED TESSELLATION WILL BE DONE,   *
*       OTHERWISE, THE TESSELLATION WILL BE DONE UNDER PERIODIC       *
*       BOUNDARY CONDITIONS AS THE DEFAULT OPTION.                    *
*                                                                     *
*  IN CASE THE NEW OPTION IS SELECTED, THE BOUNDARY FACES OF VORONOI  *
*  POLYHEDRON WILL BE INDEXED IN THE FOLLOWING MANNER:                *
*     SIX FACES OF THE BOX ARE INDEXED AS -1, -2, -3, -4, -5, -6,     *
*     RESPECTIVELY, WHERE WHICH INDEX CORRESPONDS TO WHICH BOUNDARY   *
*     IS DESCRIBED AS FOLLOWS;                                        *
*                                                                     *
*        INDEX                  BOUNDARY FACE                         *
*---------------------------------------------------------------------*
*         -1     THE FACE PARALLEL WITH Y-Z PLANE AND SMALLEST IN X   *
*         -2     THE FACE PARALLEL WITH Y-Z PLANE AND LARGEST  IN X   *
*         -3     THE FACE PARALLEL WITH Z-X PLANE AND SMALLEST IN Y   *
*         -4     THE FACE PARALLEL WITH Z-X PLANE AND LARGEST  IN Y   *
*         -5     THE FACE PARALLEL WITH X-Y PLANE AND SMALLEST IN Z   *
*         -6     THE FACE PARALLEL WITH X-Y PLANE AND LARGEST  IN Z   *
*=====================================================================*
*    A SIMPLE DESCRIPTION OF THE ALGORITHM FOR MAKING BOUNDED         *
*    VORONOI POLYHEDRON:                                              *
*                                                                     *
*      IN THE SET <S> OF CANDIDATE PARTICLES, THE MIRROR IMAGES       *
*      OF CENTRAL ATOM WITH RESPECT TO EACH CUBIC BOUNDARY ARE        *
*      INCLUDED. THEN, THE BISECTOR (BISECTING PLANE) BETWEEN THE     *
*      CENTRAL ATOM AND ITS MIRROR IMAGE ALWAYS BECOMES THE           *
*      CORRESPONDING BOUNDARY OF THE BOX. OTHER PART OF THE ALGORITHM *
*      FOR CONSTRUCTION OF VORONOI POLYHEDRON IS THE SAME AS BEFORE.  *
*      THEN, THE BOUNDED VORONOI POLYHEDRON OF ATOM IN THE VICINITY   *
*      BOX BOUNDARY IS OBTAINED.                                      *
***********************************************************************
*
***********************************************************************
*   NOTICES TO USERS:                                                 *
*     (A) FOR USERS WHO WANT TO ANALYZE THE COMPLETELY DEGENERATE     *
*         CONFIGURATIONS(*): BEFORE USING THE PROGRAM, CHANGE THE     *
*         INPUT CONFIGURATION DATA BY ADDING A SMALL RANDOM           *
*         DISPLACEMENT TO EACH COORDINATES OF PARTICLE. THE AMOUNT    *
*         OF THE DISPLACEMENT MAY BE WITHIN THE RANGE OF NUMERICAL    *
*         ERROR DURING THE COMPUTATION; THEN 10^(-6) OF SIDELENGTH    *
*         WILL BE SUFFICIENT FOR THE MAX DISPLACEMENT, FOR EXAMPLE.   *
*             (*) NOTE:                                               *
*                COMPLETELY DEGENERATE CONFIGURATION IS DEFINED HERE  *
*                AS THE CONFIGURATION WHERE EVERY VORONOI POLYHEDRON  *
*                HAS A DEGENERATE VERTEX. 'DEGENERATE VERTEX' IS      *
*                MEANT BY THE VORONOI VERTEX WHERE MORE THAN THREE    *
*                FACES MEET.                                          *
*                 A DEGENERACY OCCURS WHEN MORE THAN FOUR PARTICLES   *
*                LIE ON THE SURFACE OF A CIRCUMSCRIBING SPHERE OF     *
*                DELAUNAY TETRAHEDRON. SUCH A DEGENERACY OCCURS       *
*                WITH PROBABILITY ZERO IF A CONFIGURATION IS          *
*                GENERATED BY A PROCESS WITH STOCHASTIC NATURE        *
*                (IF A DEGENERACY HAPPENS IN THIS CASE, THIS WILL BE  *
*                REMOVED BY A RANDOM DISPLACEMENT IN OUR PROGRAM),    *
*                BUT IT WILL ALWAYS OCCUR FOR A CERTAIN TYPE OF       *
*                REGULAR LATTICES.                                    *
*                                                                     *
*     (B) FOR USERS WHO WANT TO ANALYZE A SYSTEM WITH SMALLER NUMBER  *
*         OF PARTICLES:                                               *
*          IN CASE <IBOUND = 1>, THE PROGRAM WORKS FOR ANY NO. OF     *
*         PARTICLES (NP > 3). HOWEVER, IN CASE <IBOUND = 0> (PERIODIC *
*         BOUNDARY CONDITION), <NP> IS EXPECTED TO BE AS LARGE AS     *
*         NP = 50 - 100  OR MORE IN THE PRESENT VERSION OF OUR        *
*         PROGRAM.  IF YOU, NONETHELESS, WANT TO PROCESS A FEWER      *
*         PARTICLE SYSTEM, YOU CAN DO IT BY MAKING A BIGGER           *
*         CONFIGURATION AS AN INPUT DATA BY COPYING THE ORIGINAL      *
*         SYSTEM PERIODICALLY IN ALL THREE DIRECTIONS SUCH THAT THE   *
*         TOTAL NUMBER OF PARTICLE OF THE RESULTING SYSTEM HAS THE    *
*         ABOVE EXPECTED ORDER OF VALUE.                              *
***********************************************************************
*
*
C *PURPOSE
C        STRUCTURE ANALYSIS BY VORONOI POLYHEDRA(*)
C        VERSION FOR THE GENERAL CONFIGURATION OF PARTICLES
C            (*) NOTE:
C               VORONOI POLYHEDRON P(I) OF PARTICLE I IS DEFINED BY
C               A SET OF POINTS  X  WHICH IS CLOSER TO X(I) THAN
C               OTHER PARTICLES X(J),J=1,...,NP BUT EXCEPT I,
*               WHERE  NP  IS THE NUMBER OF PARTICLES.
C
***********************************************************************
*        NOTE: PERIODIC BOUNDARY CONDITIONS ARE ASSUMED IN THE        *
*              REFERENCE BELOW, BUT THE CONDITIONS IS SELECTED        *
*              ACCORDING TO THE SWITCH PARAMETER <IBOUND> AS          *
*              DESCRIBED ABOVE.                                       *
***********************************************************************
C
C *REFERENCE
C        MASAHARU TANEMURA, TOHRU OGAWA & NAOFUMI OGITA,
C        " A NEW ALGORITHM FOR THREE-DIMENSIONAL VORONOI TESSELLATION "
C        JOURNAL OF COMPUTATIONAL PHYSICS, VOL.51, NO.2, 1983,
C        PP.191-207.
C
C  ====================================================================
C  * <<COPYRIGHT (C) 1981, 1989>>                                     *
C  *     MASAHARU TANEMURA, THE INSTITUTE OF STATISTICAL MATHEMATICS  *
C  *     TOHRU OGAWA, TSUKUBA UNIVERSITY                              *
C  *     NAOFUMI OGITA, INSTITUTE OF PHYSICAL AND CHEMICAL RESEARCH   *
C  ====================================================================
C  * << NOTICE FOR USERS >>                                           *
C  *     AS FOR ALL QUESTIONS, REPORTS ON BUGS AND IMPROVEMENTS BY    *
C  *     THE USER ABOUT THIS PROGRAM, PLEASE CORRESPOND TO:           *
C  *                                                                  *
C  *         MASAHARU TANEMURA                                        *
C  *            THE INSTITUTE OF STATISTICAL MATHEMATICS              *
C  *            4-6-7 MINAMI-AZABU, MINATO-KU, TOKYO 106   JAPAN      *
C  ====================================================================
C
C     ***** << INPUT PARAMETERS >> *****
C   * EPS  :  ACCEPTABLE LEVEL OF NUMERICAL ERROR
C   * NS   :  NUMBER OF PARTICLES IN THE SET <S>
C                <S> : A SET OF PARTICLES WHICH SURROUND THE ATOM I
C   * NRG  :  NUMBER OF PARTICLES TO DETERMINE THE RADIUS (R) OF
C            THE SPHERE WHICH INCLUDES THE SET <S>.
C                R = ((3/4/PI)*NRG/DENS)**(1/3)
C   * DFACT1 :  FACTOR OF RANDOM DISPLACEMENT
C              THE RANDOM DISPLACEMENT OF A PARTICLE IS EXECUTED WHEN
C              DEGENERACY OCCURS.
*********************************************************************
C   * ILIST  :  INDEX OF OUTPUT OF RESULTS ON THE LINE-PRINTER
C              IF ILIST = 0, THEN THIS FUNCTION DOES NOT WORK,
C         ELSE IF ILIST = 1, THEN A SHORT FORM OUTPUT IS LISTED,
C         ELSE IF ILIST = 2, THEN A DETAILED OUTPUT IS LISTED.
C   * NDATA  :  NUMBER OF DATA CONFIGURATIONS TO BE PROCESSED
C              AT ONE JOB
C     (NSTP(L),L=1,NDATA) :  DATA ID'S
C   * IFILE  :  SW OF OUTPUT OF RESULTS INTO THE FILE (DATASET NO.=1)
C         IF IFILE = 0, THEN NO OUTPUT,
C         ELSE IF IFILE = 1, THEN THE OUTPUT IS IN BINARY FORM,
C         ELSE THE OUTPUT IS IN EBCDIC(ASCII) FORM.
*   * IBOUND : INDEX FOR THE TESSELLATION UNDER BOUNDED CONDITION.
*         IF IBOUND = 1, THEN THE ABOVE FUNCTION WORKS,
*         ELSE THE PERIODIC BOUNDARY IS USED AS A DEFAULT.
C********************************************************************
*
*     *** << INPUT OF CONFIGURATION DATA FROM FILE(10) >> ***
*     EACH CONFIGURATION IS INPUT AS THE FOLLOWING FORM:
*
*       READ (10, * ) NSTEP,NP
*       READ (10, * ) BOXLX,BOXLY,BOXLZ
*       READ (10, * ) (K,XX(K),YY(K),ZZ(K),L=1,NP)
*
*   <EXPLANATION>
*       NSTEP : ID OF THE CONFIGURATION PATTERN
*       NP : NUMBER OF PARTICLES (NO. OF ATOMS) OF THE SYSTEM
*       BOXLX, BOXLY, BOXLZ : SIDE LENGTHS OF THE BOX (RECTANGULAR
*            PARALLEL PIPED) OF THE SYSTEM
*      (XX(K),YY(K),ZZ(K), K=1, NP) : COORDINATES OF POINTS
*====================================================================
*
C     **** << OUTPUT TO THE LINE PRINTER >> ****
*
*  % HEADER LIST (OUTPUT FOR EACH CONFIGURATION):
*
*       WRITE(6,660) NS, NRG, RCUT1, SPV, SPA, ILIST, IFILE, IBOUND
*       WRITE(6,670) NSTEP, NP, DENS, BOXLX,BOXLY,BOXLZ
*       IF (ILIST .NE. 0) THEN
*         WRITE(6,663)  (L,XX(L),YY(L),ZZ(L),L=1,NP)
*       END IF
*
*   <EXPLANATION TO NEW PARAMETERS>
*       RCUT1 : CUT OFF DISTANCE FOR COMPUTING THE SET <NS(I)>
*       SPV : MEAN VOLUME OF POLYHEDRON
*       SPA : MEAN SURFACE AREA OF POLYHEDRON (POLYHEDRON OF REGULAR
*          F.C.C. LATTICE IS ASSUMED)
*       DENS : NUMBER DENSITY ( = NP / VOLUME OF THE BOX )
*
*  % LIST FOR EACH VORONOI POLYHEDRON <P(I)> (I = 1, NP) :
*
*       IF (ILIST .NE. 0) THEN
*         WRITE(6,600) I,NF,JTET,DIST(2),(NFF(J),J=3,12),SPR,VPR
*    $                ,IDSPL,INCMP,JRANGE
*         IF(ILIST .EQ. 2) THEN
*           WRITE(6,630)  (NORD(L),DIST(L),NBR(L),SP(L),L=2,JO1)
*           WRITE(6,631)  (TV(L),(ICNT(NN,L),NN=1,3),(TVC(NN,L),NN=1,3)
*    $                    ,L=1,JTET)
*         END IF
*       END IF
*
*   <EXPLANATION>
*       I : INDEX OF THE ATOM
*       NF: NO. OF VORONOI FACES
*       JTET: NO. OF VORONOI VERTICES (NO. OF DELAUNAY TETRAHEDRA)
*       DIST(2): DISTANCE TO THE NEAREST NEIGHBOUR PARTICLE
*      (NFF(J),J=3,12): NO. OF J-SIDED VORONOI FACES (INDEX OF P(I))
*       SPR: SURFACE AREA RELATIVE TO THE STANDARD POLYHEDRON
*       VPR: VOLUME RELATIVE TO THE STANDARD POLYHEDRON
*            (NOTE: STANDARD POLYHEDRON IS CHOSEN AS A POLYHEDRON
*             OF REGULAR F.C.C. LATTICE AT THE SAME DENSITY AS THE
*             CURRENT SYSTEM UNDER CONSIDERATION)
*       IDSPL: NO. OF TRIALS OF DISPLACEMENT OF COORDINATES
*            (NOTE: THIS WILL BE ZERO IN NORMAL CASE, BUT IN CASE
*             SOME DEGENERACY OCCURS THE RANDOM DISPLACEMENT OF
*             COORDINATES WILL BE DONE UP TO TEN TIMES)
*       INCMP: NO. OF TRIALS TO OBTAIN A POLYHEDRON WHICH IS NOT
*             INTERVENED BY OTHER POLYHEDRA.
*       JRANGE: NO. OF PARTCILES IN THE CUT OFF RANGE (THE SPHERE
*             WITH RADIUS <RCUT1>)
*
*      (NORD(L), L=2,JO1): ID OF CONTIGUOUS PARTICLES
*            (NOTE: JO1 = NF + 1)
*      (DIST(L), L=2,JO1): DISTANCE TO CONTIGUOUS PARTICLE <NORD(L)>
*      (NBR(L), L=2,JO1): NO. OF EDGES OF THE FACE CORRESPONDING TO
*             CONTIGUOUS PARTICLE <NORD(L)>
*      (SP(L), L=2,JO1): AREA OF THE FACE CORRESPONDING TO <NORD(L)>
*
*      (TV(L),L=1,JTET): VOLUME OF DELAUNAY TETRAHEDRON WITH ID <L>
*           (NOTE: DELAUNAY TETRAHEDRON IS OFTEN ABBREVIATED AS D.T.)
*      ((ICNT(NN,L),NN=1,3),L=1,JTET): LIST OF VERTEX PARTICLES OF
*           <L>-TH D.T.
*           (NOTE: CENTRAL PARTICLE <I> ALWAYS CONSTITUTES ONE OF THE
*            VERTICES OF D.T. AND THEN IT IS OMITTED FROM THE LIST
*            <ICNT>.)
*      ((TVC(NN,L),NN=1,3),L=1,JTET): COORDINATES OF THE CENTER OF
*            THE CIRCUMSCRIBING SPHERE OF D.T.
*           (NOTE: TVC(1,L), TVC(2,L), TVC(3,L) REPRESENT X,Y,Z
*            COORDINATE, RESPECTIVELY.)
*
*  % LIST AT THE END OF EACH CONFIGURATION
*
*       WRITE(6,662)  TOTVOL,TVOL
*
*  <EXPLANATION>
*       TOTVOL : SUM OF THE VOLUME OF ALL POLYHEDRA
*       TVOL : VOLUME OF THE BOX
*           (NOTE: IF TOTVOL == TVOL, THEN THE VORONOI TESSELLATION
*            IS SUCCESSFUL)
*---------------------------------------------------------------------*
*
C     **** << OUTPUT TO THE FILE (1) >> **** (CASE IFILE <> 0)
*
*
*  % HEADER LIST (OUTPUT FOR EACH CONFIGURATION):
*
*         WRITE(1,*)  NSTEP, NP, DENS, BOXLX,BOXLY,BOXLZ,
*    $               (XX(L),YY(L),ZZ(L),L=1,NP)
*
*  % LIST FOR EACH VORONOI POLYHEDRON <P(I)> (I = 1, NP) :
*
*          WRITE(1,*) I,JO1,NF,JTET,(NFF(KFN),KFN=3,14)
*    &      ,SPOL,SPR,VPOL,VPR
*    &      ,(NORD(L),JORD(L),DIST(L),NBR(L),SP(L),L=2,JO1)
*    &      ,(TV(L),HC(L),L=1,JTET)
*    &      ,((ICNT(NN,L),NN=1,3),L=1,JTET)
*
*  <EXPLANATION OF NEW PARAMETERS>
*
*      SPOL: SURFACE AREA OF POLYHEDRON
*      VPOL: VOLUME OF POLYHEDRON
*     (JORD(L),L=2,JO1): ID OF CONTIGUOUS PARTICLES (NUMBERED INSIDE
*           THE ROUTINE)
*     (HC(L),L=1,JTET): RADIUS OF CIRCUMSCRIBING SPHERE OF D.T.
*
*====================================================================
*********************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
*
* ***********************************
      CHARACTER*64 INFILE
* ***********************************
      PARAMETER (NSW  =  300)
*         NSW : SIZE OF WORKING AREA FOR <NS(I)> (SETS TO SELECT S(I))
      PARAMETER (NTW  =  100)
*         NTW : SIZE OF WORKING AREA FOR <S(I)> (CANDIDATE SETS)
      PARAMETER (NFMX =   60)
*         NFMX : MAXIMUM NO. OF VORONOI FACES
      PARAMETER (NVMX =   80)
*         NVMX : MAXIMUM NO. OF VORONOI VERTICES (DELAUNAY TETRAHEDRA)
      PARAMETER (NPNT = 4000)
*         NPNT : NO. OF POINTS (NO. OF ATOMS)
C
      DIMENSION   KORD(NSW), IORD(NSW), IE(NSW), IV(NSW, NFMX)
      DIMENSION   JORD(NVMX), LC(NVMX), KT(NVMX), LED(NVMX, NFMX)
      DIMENSION   MT(2, NFMX, NVMX)
      DIMENSION   CX(NFMX, NVMX), CY(NFMX, NVMX), CZ(NFMX, NVMX)
      DIMENSION   NBR(NVMX), NORD(NVMX), NFF(20)
      DIMENSION   TV(NVMX),HC(NVMX),TVC(3,NVMX), SP(NVMX), DIST(NVMX)
      DIMENSION   ICNT(3,NVMX), NSTP(100)
      DIMENSION   ISJK(NTW), ISJK1(NTW), ISJK2(NTW)
      DIMENSION   X0(NPNT),Y0(NPNT),Z0(NPNT),XX(NPNT),YY(NPNT),ZZ(NPNT)
      COMMON  /XYZ/  X(NSW), Y(NSW), Z(NSW), DSQ(NSW)
      DATA  RT2D3 /0.471404520791032D0/  PI /3.141592653589793D0/
      INTEGER NXN
      REAL*8 TT00, TT11


      t = time()
*
10000 FORMAT(A/)
*20000 WRITE(*,10000) '  INPUT DATA FILE NAME?'
*10001 FORMAT(A64)
*      READ(*,10001) INFILE
*
**************************************************
*      OPEN (10,FILE=INFILE,STATUS='UNKNOWN',ERR=20000)
**************************************************
*
C********** ENTRY **********
*     VCON = RT2D3*DSQRT(RT2D3)/4.0D0
*     SCON = DCBRT(4.0D0*4.0D0)/RT2D3
      SCON = EXP(LOG(4.0D0*4.0D0)/3.0D0)/RT2D3
      X(1) = 0.0D0
      Y(1) = 0.0D0
      Z(1) = 0.0D0
      DSQ(1)= 0.0D0
      IRAND= 0
      IX = 125
      READ(5, * )  EPS
*     WRITE(*, * )  'EPS = ',EPS
      READ(5, * )  NS,NRG
*     WRITE(*, * )  'NS,NRG = ',NS,NRG
      READ(5, * )  DFACT
*     WRITE(*, * )  'DFACT = ',DFACT
      READ(5, * )  ILIST
*     WRITE(*, * )  'ILIST = ',ILIST
      READ(5, * )  NDATA
*     WRITE(*, * )  'NDATA = ',NDATA
      READ(5, * ) (NSTP(L),L=1,NDATA)
      READ(5, * )  IFILE
*     WRITE(*, * )  'IFILE = ',IFILE
*
      READ(5, * )  IBOUND
*     WRITE(*, * )  'IBOUND = ',IBOUND
**      IBOUND : INDEX FOR THE TESSELLATION UNDER BOUNDED CONDITION.
**        IBOUND = 1, THEN THE ABOVE FUNCTION WORKS,
**        IBOUND = 0, THEN THE PERIODIC BOUNDARY IS USED.
C
C                  **********   OUTER LOOP   **********
C
      DO 9000 ND=1,NDATA
C
       NSTP0 = NSTP(ND)
C
C*****  INPUT OF CONFIGURATION OF PARTICLES *****
C     ===========================================
 5100 READ (5, * ) NSTEP,NP
      READ (5, * ) BOXLX,BOXLY,BOXLZ
      READ (5, * ) (K,XX(K),YY(K),ZZ(K),L=1,NP)
C     ===========================================
      IF(NSTEP.LT.NSTP0) GO TO 5100
C
      TVOL = BOXLX * BOXLY * BOXLZ
      HBLX = 0.5D0 * BOXLX
      HBLY = 0.5D0 * BOXLY
      HBLZ = 0.5D0 * BOXLZ
C
C***** PUT IN REAL BOX ************************************************
* ALL ATOMS ARE MOVED TO THE REGION (0,BOXLX) X (0,BOXLY) X (0,BOXLZ) *
***********************************************************************
C
      DO 5112 I=1,NP
        XX(I) = MOD( XX(I),BOXLX )
        IF(XX(I).LT.0.0D0) XX(I) = XX(I)+BOXLX
        YY(I) = MOD( YY(I),BOXLY )
        IF(YY(I).LT.0.0D0) YY(I) = YY(I)+BOXLY
        ZZ(I) = MOD( ZZ(I),BOXLZ )
        IF(ZZ(I).LT.0.0D0) ZZ(I) = ZZ(I)+BOXLZ
 5112 CONTINUE
C
      PN  = FLOAT(NP)
      DENS= PN/TVOL
      PAV = 0.75D0*FLOAT(NRG)/(PI*PN)
*     RCUT1= BOXLX*CBRT(PAV)
      RCUT1= BOXLX*EXP(LOG(PAV)/3.0D0)
      RRC1= RCUT1**2
      SPV = 1.0D0/DENS
*     SPA = SCON*CBRT(SPV*SPV)
      SPA = SCON*EXP(LOG(SPV*SPV)/3.0D0)
      DSPL= SPA*DFACT
C
      WRITE(6,660) NS,NRG,RCUT1,SPV,SPA, ILIST, IFILE, IBOUND
  660         FORMAT(6X, '  NS =', I3, '    NRG =', I3,
     $     '    RCUT1 =', 1P, E12.5, 0P, ' SPV =',F10.5,'  SPA =',F10.5/
     $       6X, '  ILIST =',I3, '    IFILE =', I3, '    IBOUND =',I3/)
C
      WRITE(6,670)  NSTEP, NP, DENS, BOXLX,BOXLY,BOXLZ
  670         FORMAT('  PTN#', I6, 5X, 'NP=', I4, 5X, '  DENS=', F7.4,
     $        '   BOXLX=',F7.4, '   BOXLY=',F7.4, '   BOXLZ=',F7.4)
C
      IF(ILIST.NE.0)  THEN
        WRITE(6,664)
  664     FORMAT(11X,'*** COORDINATES AFTER PUTTING TO REAL BOX ***'/)
        WRITE(6,663)  (L,XX(L),YY(L),ZZ(L),L=1,NP)
  663           FORMAT((1H ,2X,4(1H(,I4,1H),3F8.4,2X)))
      ENDIF
C
C     =================================================
      IF(IFILE.NE.0) THEN
        IF(IFILE .EQ. 1) THEN
          WRITE(1)  NSTEP, NP, DENS, BOXLX,BOXLY,BOXLZ,
     $               (XX(L),YY(L),ZZ(L),L=1,NP)
        ELSE
          WRITE(1,*) NSTEP,NP, DENS, BOXLX,BOXLY,BOXLZ,
     $               (XX(L),YY(L),ZZ(L),L=1,NP)
        END IF
      END IF
C     =================================================
C
      TT00 = rtc()
      DO 9999 NXN=0,9

      TOTVOL= 0.0D0
      LP    = 0
C
      DO 1000 I=1,NP
C
        INCMP = 0
        IDSPL = 0
        RCUT= RCUT1
        RRC = RRC1
C         *****  I : CENTRAL ATOM *****
C***********************************************************
        XXI = XX(I)
        YYI = YY(I)
        ZZI = ZZ(I)
C
C********** SELECTION OF SI AND ******************************
C================<< STEP   1 >>================
C***** ORDERING NEIGHBOURS BY THE DISTANCE FROM ATOM <I> *****
C
        NMX = NS
C===== RE-ENTER FROM COMPLETENESS CHECK AT END OF STEP STEP 4 =====
C
 8300   L = 1
        JRANGE = 0
C
*** TAKING PERIODIC IMAGE OF ATOMS WITH RESPECTY TO CENTRAL ATOM <I>.
*** IN CASE <IBOUND = 0>.
*
       DO 20 J=1,NP
        IF(J.EQ.I) GO TO 20
        DX = XX(J)-XXI
        IF (IBOUND .EQ. 0) THEN
          IF(ABS(DX).GT.HBLX) DX=DX-SIGN(BOXLX,DX)
        END IF
        IF(ABS(DX).GT.RCUT)  GO TO 20
        X0(J) = DX
        DY = YY(J)-YYI
        IF (IBOUND .EQ. 0) THEN
          IF(ABS(DY).GT.HBLY) DY=DY-SIGN(BOXLY,DY)
        END IF
        IF(ABS(DY).GT.RCUT)  GO TO 20
        Y0(J) = DY
        DZ = ZZ(J)-ZZI
        IF (IBOUND .EQ. 0) THEN
          IF(ABS(DZ).GT.HBLZ) DZ=DZ-SIGN(BOXLZ,DZ)
        END IF
        IF(ABS(DZ).GT.RCUT)  GO TO 20
        Z0(J) = DZ
C
        RR = DX*DX+DY*DY+DZ*DZ
        IF(RR.LE.RRC) THEN
          JRANGE=JRANGE+1
          LW = L+1
          IF(L.GE.2) THEN
            WK = DSQ(LW-1)
   10       CONTINUE
            IF(RR.GE.WK) GO TO 11
              KORD(LW) = KORD(LW-1)
              DSQ(LW)  = WK
              LW  = LW-1
              WK  = DSQ(LW-1)
              GO TO 10
   11       CONTINUE
          ENDIF
          KORD(LW) = J
          DSQ(LW)  = RR
          IF(L.LT.NMX) L=L+1
        ENDIF
   20  CONTINUE
C
*******************************
      IF(L .LT. NMX) THEN
        NMX = L
      END IF
*******************************
      NR2=2
C
C================<< STEP   2 >>================
C********** MINIMUM TRIANGLE (I,I1,I2) **********

C===== RE-ENTER AFTER RANDOM DISPLACEMENT IN DEGENERATE CASE =====
 8500 RMIN = RRC
      DO 40 J=2,NMX
        K   = KORD(J)
        X(J)= X0(K)
        Y(J)= Y0(K)
        Z(J)= Z0(K)
       IF(J.GT.2) THEN
C        =================
         CALL TRGL12(J,RR)
C        =================
        IF(RR.LT.RMIN) THEN
         RMIN=RR
         NR3=J
        ENDIF
       ENDIF
   40 CONTINUE
C
******* BOUNDED CASE: INCLUSION OF MIRROR IMAGES TO S (89/11/18) *****
      IF(IBOUND .EQ. 1) THEN
        DO 45 J = 1, 6
          NMX = NMX + 1
*         ==================================================
          CALL MIRROR (J, XXI,YYI,ZZI, X(NMX),Y(NMX),Z(NMX),
     1                 BOXLX,BOXLY,BOXLZ)
*         ==================================================
          KORD(NMX) = -J
          DSQ(NMX) = X(NMX)*X(NMX) + Y(NMX)*Y(NMX) + Z(NMX)*Z(NMX)
   45   CONTINUE
C       WRITE(6,6999) LN,KORD(2),(KORD(L),L=3,NMX)
C       WRITE(6,6998) XLN,YLN,ZLN,(X(L),Y(L),Z(L),L=2,NMX)
      END IF
******* BOUNDED CASE: INCLUSION OF MIRROR IMAGES TO S (89/11/18) *****
C
C================<< STEP   3 >>================
C********** MINIMUM TETRAHEDRON I,I1,I2,I3 **********
C     ***** DETECTION OF INITIAL DT *****
C
C     =============================
      CALL PLANE (NR2,NR3,C1,C2,C3)
C     =============================
      NPOS = 0
      NNEG = 0
      DO 50 J=3,NMX
        IF(J.NE.NR3) THEN
          TT=C1*X(J)+C2*Y(J)+C3*Z(J)
         IF(ABS(TT).GE.EPS) THEN
          IF(TT.GE.0.0D0) THEN
           NPOS = NPOS+1
           ISJK1(NPOS) = J
          ELSE
           NNEG = NNEG+1
           ISJK2(NNEG) = J
          ENDIF
         ENDIF
        ENDIF
   50 CONTINUE
      IF(NPOS.LE.0 .OR. NNEG.LE.0) WRITE(6,6100) NPOS,NNEG,NMX,NR2,NR3,
     $            C1,C2,C3, KORD(NR2),KORD(NR3),X(NR2),Y(NR2),Z(NR2),
     $            X(NR3),Y(NR3),Z(NR3),X0(KORD(NR2)),X0(KORD(NR3))
 6100      FORMAT(1H ,5X,'NPOS,NNEG,NMX=',3I5,2X,'NR2,NR3=',2I5/
     $        1H ,5X,'C1,C2,C3=',3E15.5,5X,'KORD(NR2),KORD(NR3)=',2I5/
     $        1H ,5X,'X,Y,Z(NR2)=',3F15.5,5X,'X,Y,Z(NR3)=',3F15.5/
     $        1H ,5X,'X0(IORD(NR2)),X0(IORD(NR3))=',2F15.5)
      IF(NPOS.LE.0 .OR. NNEG.LE.0) STOP  51
C
      KMX  = NPOS
C     ==========================================
   52 CALL SPHERE (NR2,NR3,ISJK1(1),T1,T2,T3,RR)
C     ==========================================
      IF(KMX.GT.1) THEN
       NPOS1= 0
      DO 53 J=2,KMX
        LJ   = ISJK1(J)
        XD   = X(LJ)
        YD   = Y(LJ)
        ZD   = Z(LJ)
        TT   = XD*(XD-T1-T1)+YD*(YD-T2-T2)+ZD*(ZD-T3-T3)
       IF(ABS(TT).GE.EPS) THEN
         IF(TT.LT.0.0D0) THEN
           NPOS1 = NPOS1+1
           ISJK(NPOS1) = LJ
         ENDIF
       ENDIF
   53 CONTINUE
C
       IF(NPOS1.GT.0) THEN
        KMX = NPOS1
        DO 54 J=1,KMX
   54   ISJK1(J) = ISJK(J)
        GO TO 52
       ENDIF
      ENDIF
      RR1  = RR
      NR41 = ISJK1(1)
C
C
      KMX  = NNEG
C     ==========================================
   56 CALL SPHERE (NR2,NR3,ISJK2(1),U1,U2,U3,RR)
C     ==========================================
      IF(KMX.GT.1) THEN
        NNEG1 = 0
      DO 57 J=2,KMX
        LJ  = ISJK2(J)
        XD  = X(LJ)
        YD  = Y(LJ)
        ZD  = Z(LJ)
        TT  = XD*(XD-U1-U1)+YD*(YD-U2-U2)+ZD*(ZD-U3-U3)
       IF(ABS(TT).GE.EPS) THEN
         IF(TT.LT.0.0D0) THEN
           NNEG1 = NNEG1+1
           ISJK(NNEG1) = LJ
         ENDIF
       ENDIF
   57 CONTINUE
C
      IF(NNEG1.GT.0) THEN
       KMX = NNEG1
       DO 58 J=1,KMX
   58  ISJK2(J) = ISJK(J)
       GO TO 56
      ENDIF
      ENDIF
      RR2  = RR
      NR42 = ISJK2(1)
C
      IF(RR1.LE.RR2) THEN
        NR4  = NR41
        NR5  = NR42
        RMIN = RR1
        RMIN1= RR2
        TXJ  = T1
        TYJ  = T2
        TZJ  = T3
        TXJ1 = U1
        TYJ1 = U2
        TZJ1 = U3
       ELSE
        NR4  = NR42
        NR5  = NR41
        RMIN = RR2
        RMIN1= RR1
        TXJ  = U1
        TYJ  = U2
        TZJ  = U3
        TXJ1 = T1
        TYJ1 = T2
        TZJ1 = T3
      ENDIF
C     ***** END OF THE DETECTION OF THE FIRST AND THE SECOND DT'S *****
C
C
C     WRITE(6,571) NR41,NR42,RR1,RR2,T1,T2,T3,U1,U2,U3
  571 FORMAT(/1H ,5X,'NR41,NR42=',2I5,5X,'RR1,RR2=',1P2E15.5/
     1       1H ,5X,'T1,...,U3=',0P6F10.5)
C
C
C================<< STEP   4 >>================
C
C----------------------------------------------------------------------!
C  PT#  NO.OF NEIGH.                       NO. OF TET.     CNTR OF TET.!
C    JORD()     NEIGH.#            USE OF FACE     PT# IN TET          !
C                    PT# OF NEIGH.      =0,1,2                         !
C----------------------------------------------------------------------!
C                 NV IV(IA,NV)=IB  LED(K ,NV)      MT(1,KTA,K )        !
C  IA  K  IEA=IE(IA)                        KTA=KT(K )       CX(KTA,K )!
C                 NZ IV(IA,NZ)=ID  LED(K ,NZ)      MT(2,KTA,K )        !
C----------------------------------------------------------------------!
C                 IR IV(IB,IR)=IA  LED(KB,IR)      MT(1,KTB,KB)        !
C  IB  KB IEB=IE(IB)                        KTB=KT(KB)       CX(KTB,KB)!
C                 IZ IV(IB,IZ)=ID  LED(KB,IZ)      MT(2,KTB,KB)        !
C----------------------------------------------------------------------!
C                 JR IV(ID,JR)=IA  LED(KD,JR)      MT(1,KTD,KD)        !
C  ID  KD IED=IE(ID)                        KTD=KT(KD)       CX(KTD,KD)!
C                 JV IV(ID,JV)=IB  LED(KD,JV)      MT(2,KTD,KD)        !
C----------------------------------------------------------------------!
C=================< STEP 4.0 >=================
C********** CLEAR ******************
      DO 60 M=1,NMX
      LC(M)=0
   60 IE(M)=0
      DO 70 M=1,NVMX
*     DO 70 M=1,80
      KT(M)=0
      DO 70 L=1,NFMX
*     DO 70 L=1,60
   70 LED(M,L)=0
C
C***** REGISTRATION OF THE TWO TETRAHEDRA *****
C
      JTET=1
      HC(JTET) = SQRT(RMIN)
C     =================================
      CALL TTRVOL(NR2,NR3,NR4,TV(JTET))
C     =================================
      ICNT(1,JTET) = KORD(NR2)
      ICNT(2,JTET) = KORD(NR3)
      ICNT(3,JTET) = KORD(NR4)
       TVC(1,JTET) = TXJ+XXI
       TVC(2,JTET) = TYJ+YYI
       TVC(3,JTET) = TZJ+ZZI
      JTET = 2
      HC(JTET) = SQRT(RMIN1)
C     =================================
      CALL TTRVOL(NR2,NR3,NR5,TV(JTET))
C     =================================
      ICNT(1,JTET) = KORD(NR2)
      ICNT(2,JTET) = KORD(NR3)
      ICNT(3,JTET) = KORD(NR5)
       TVC(1,JTET) = TXJ1+XXI
       TVC(2,JTET) = TYJ1+YYI
       TVC(3,JTET) = TZJ1+ZZI
C
      JORD(1) = 1
      JORD(2) = NR2
      JORD(3) = NR3
      JORD(4) = NR4
      JORD(5) = NR5
      JO1  = 5
C
      KT(1) = 2
      KT(2) = 2
      KT(3) = 2
      KT(4) = 1
      KT(5) = 1
C
      DO 80 K=2,3
        CX(1,K)=TXJ
        CY(1,K)=TYJ
        CZ(1,K)=TZJ
        CX(2,K)=TXJ1
        CY(2,K)=TYJ1
        CZ(2,K)=TZJ1
   80 CONTINUE
        CX(1,4)=TXJ
        CY(1,4)=TYJ
        CZ(1,4)=TZJ
        CX(1,5)=TXJ1
        CY(1,5)=TYJ1
        CZ(1,5)=TZJ1
C
      DO 90 K=2,5
        IK = JORD(K)
        IE(IK) = 3
        IF(K.GE.4) IE(IK)=2
        IEK = 0
        DO 83 L=2,5
          IF(L.EQ.K) GO TO 83
          IEK = IEK+1
          IV(IK,IEK) = JORD(L)
          LED(K,IEK) = 1
          IF((IEK.EQ.1).AND.(IE(IK).GT.2)) LED(K,IEK) = 2
          IF(IEK.GE.IE(IK)) GO TO 84
   83   CONTINUE
   84   KTK=KT(K)
        DO 85 LW=1,KTK
          MT(1,LW,K) = IV(IK,1)
          MT(2,LW,K) = IV(IK,2)
          IF(LW.EQ.2)  MT(2,LW,K) = IV(IK,IE(IK))
   85   CONTINUE
   90 CONTINUE
C     ***** END OF THE INITIALIZATION *****
C
C
C=================< STEP 4.1 >=================
      K = 1
C=================< STEP 4.2 >=================
  150 K = K+1
      IF(K.GT.JO1) GO TO 480
C
C    ***** IA --- K-TH REGISTERED PARTICLE  (NRK) *****
      IA = JORD(K)
C
C=================< STEP 4.3 >=================
      IF(LC(IA).GE.1) GO TO 150
C
C=================< STEP 4.4 >=================
C    ***** IEA ----- NUMBER OF NEIGHBOURS OF IA *****
  160 IEA = IE(IA)
      IF(IEA.GT.2) GO TO 170
C    ***** NEW IA.  IB,IC IS 2-NEIGHBOURS OF IA
      IB  = IV(IA,2)
      IC  = IV(IA,1)
      NV  = 2
      GO TO 220
C
C    ***** IA HAS BEEN REGISTERED ALREADY *****
C    ***** SEARCH A SINGLE COUNTED EDGES FROM IA *****
  170 DO 180 NV=1,IEA
      IF(LED(K,NV).EQ.1) GO TO 190
  180 CONTINUE
C    ***** ERROR
      NERR = 180
      WRITE(6,6001)
      GO TO 4200
C
C    ***** IB ----- FOUND NEIGHBOUR OF IA *****
  190 IB  = IV(IA,NV)
C    ***** SEARCH THE OTHER NEIGHBOUR, IC *****
      KTA = KT(K)
      DO 200 KR=1,KTA
        J = 1
       IF(IB.EQ.MT(J,KR,K)) GO TO 210
        J = 2
       IF(IB.EQ.MT(J,KR,K)) GO TO 210
  200 CONTINUE
C    ***** ERROR
      NERR=200
      GO TO 4200
C
C    ***** IC WAS FOUND
  210 J = 3-J
      IC  = MT(J,KR,K)
C
C    ***** IB-REGISTRATION ? *****
  220 DO 230 KB=1,JO1
        IF(IB.EQ.JORD(KB)) GO TO 240
  230 CONTINUE
C    ***** ERROR
      NERR = 230
      GO TO 4200
C
C    ***** IB-IA RELATION ? *****
  240 IEB = IE(IB)
      DO 250 IR=1,IEB
        IF(IA.EQ.IV(IB,IR)) GO TO 260
  250 CONTINUE
C    *****ERROR
      NERR = 250
      WRITE(6,6001)
      WRITE(6,6000) IA,(IV(IA,J),J=1,IEA)
      WRITE(6,6000) IB,(IV(IB,J),J=1,IEB)
      GO TO 4200
C
C***** SEARCH NEW NEIGHBOUR ID IN OPOSITE SIDE OF IC *****
C=================< STEP 4.5 >=================
C     ==========================
  260 CALL PLANE(IA,IB,C1,C2,C3)
C     ==========================
      TT  = C1*X(IC)+C2*Y(IC)+C3*Z(IC)
      IF(ABS(TT).LT.EPS) THEN
        IS3 = 0
        WRITE(6,566) I,K,IA,IB,IC,C1,C2,C3,X(IC),Y(IC),Z(IC)
        STOP 260
      ENDIF
  566 FORMAT(1H ,'I,K,IA,IB,IC=',5I5/
     2        1H ,'C1,...,Z(IC)=',6F10.5)
C
C
      IF(TT.GE.0.0D0) THEN
        IS3 = 1
       ELSE
        IS3 = -1
      ENDIF
C
      NN = 0
      DO 270 J=2,NMX
       IF((J.NE.IA).AND.(J.NE.IB).AND.(J.NE.IC)) THEN
       IF(LC(J).EQ.0) THEN
        TT = C1*X(J)+C2*Y(J)+C3*Z(J)
       IF(ABS(TT).GE.EPS) THEN
        IF(TT.GE.0.0D0) THEN
          JS = 1
         ELSE
          JS = -1
        ENDIF
        IF(JS.NE.IS3) THEN
          NN = NN+1
          ISJK(NN) = J
        ENDIF
       ENDIF
       ENDIF
       ENDIF
  270 CONTINUE
*
      IF (IBOUND .EQ. 0) THEN
        IF(NN.EQ.0) GO TO 490
      END IF
*
C
C=================< STEP 4.6 >=================
C     ======== FINDING OF ID ========
C
      KMX = NN
C     =======================================
  280 CALL SPHERE (IA,IB,ISJK(1),T1,T2,T3,RR)
C     =======================================
      IF(KMX.GT.1) THEN
      NNN  = 0
      NNDG = 0
      DO 282 J=2,KMX
        LJ  = ISJK(J)
        XD  = X(LJ)
        YD  = Y(LJ)
        ZD  = Z(LJ)
        TT  = XD*(XD-T1-T1) + YD*(YD-T2-T2) + ZD*(ZD-T3-T3)
       IF(ABS(TT).LT.EPS) THEN
          NNDG = NNDG+1
          ISJK2(NNDG) = LJ
        ELSE
         IF(TT.LT.0.0D0) THEN
          NNN = NNN+1
          ISJK1(NNN) = LJ
         ENDIF
       ENDIF
  282 CONTINUE
      KMX = NNN+NNDG
      IF(KMX.NE.0) THEN
        IF(NNN.GT.0) THEN
          DO 283 J=1,NNN
  283     ISJK(J) = ISJK1(J)
         IF(NNDG.GT.0) THEN
          DO 284 J=NNN+1,KMX
  284     ISJK(J) = ISJK2(J-NNN)
         ENDIF
         GO TO 280
        ENDIF
C
      ENDIF
      ENDIF
C
      ID  = ISJK(1)
      TXJ = T1
      TYJ = T2
      TZJ = T3
C
C=================<STEP 4.7>=================
C    ***** REGISTRATION OF NEW TETRAHEDRON *****
      IED = IE(ID)
      KEY = 0
C
C    ***** ID IN JORD? *****************************
      DO 300 KD=1,JO1
        IF(ID.EQ.JORD(KD)) GO TO 310
  300 CONTINUE
C    ***** REGISTER ID TO JORD *****
      JO1 = JO1+1
      KD  = JO1
C   ***** DATA ERROR *****
      IF(KD.GT.NMX) THEN
        WRITE(6,690) NSTEP,NP,NS,NRG,NMX,KD
        STOP 300
       ENDIF
  690     FORMAT(' ***** DATA ERROR ***** PTN#',6I10)
C   **********************
      JORD(KD) = ID
      KEY = 4
      GO TO 330
C
C    ***** ID-IA RELATION?
  310 DO 320 NZ=1,IEA
        IF(ID.EQ.IV(IA,NZ)) GO TO 340
  320 CONTINUE
C    ***** ID-IA NEW
      KEY = KEY+2
  330 IEA = IEA+1
      NZ  = IEA
      IE(IA) = IEA
      IV(IA,IEA) = ID
      IED = IED+1
      JR  = IED
      IE(ID) = IED
      IV(ID,IED) = IA
      IF(KEY.NE.4) GO TO 360
      GO TO 380
C
C    ***** ID-IA OLD
  340 DO 350 JR=1,IED
        IF(IA.EQ.IV(ID,JR)) GO TO 360
  350 CONTINUE
C    *****ERROR
      NERR = 350
      GO TO 4200
C
C    ***** ID-IB RELATION? *****
  360 DO 370 IZ=1,IEB
        IF(ID.EQ.IV(IB,IZ)) GO TO 390
  370 CONTINUE
C    ***** ID-IB NEW
      KEY = KEY+1
  380 IEB = IEB+1
      IZ  = IEB
      IE(IB) = IEB
      IV(IB,IEB) = ID
      IED = IED+1
      JV  = IED
      IE(ID) = IED
      IV(ID,IED) = IB
      GO TO 410
C
C    ***** ID-IB OLD
  390 DO 400 JV=1,IED
        IF(IB.EQ.IV(ID,JV)) GO TO 410
  400 CONTINUE
C    ***** ERROR
      NERR = 400
      GO TO 4200
C
C    ***** REGISTRATION *****
  410 LED(K,NV) = LED(K,NV)+1
      LED(K,NZ) = LED(K,NZ)+1
      KT(K) = KT(K)+1
      KTA = KT(K)
      MT(1,KTA,K) = IB
      MT(2,KTA,K) = ID
      CX(KTA,K) = TXJ
      CY(KTA,K) = TYJ
      CZ(KTA,K) = TZJ
C
      LED(KB,IR) = LED(KB,IR)+1
      LED(KB,IZ) = LED(KB,IZ)+1
      KT(KB) = KT(KB)+1
      KTB = KT(KB)
      MT(1,KTB,KB) = IA
      MT(2,KTB,KB) = ID
      CX(KTB,KB) = TXJ
      CY(KTB,KB) = TYJ
      CZ(KTB,KB) = TZJ
C
      LED(KD,JR) = LED(KD,JR)+1
      LED(KD,JV) = LED(KD,JV)+1
      KT(KD) = KT(KD)+1
      KTD = KT(KD)
      MT(1,KTD,KD) = IA
      MT(2,KTD,KD) = IB
      CX(KTD,KD) = TXJ
      CY(KTD,KD) = TYJ
      CZ(KTD,KD) = TZJ
C
      JTET = JTET+1
      HC(JTET) = SQRT(RMIN)
C
C     ***** COMPUTATION OF TETRAHEDRON VOLUME *****
C     ==============================
      CALL TTRVOL(IA,IB,ID,TV(JTET))
C     ==============================
C
      ICNT(1,JTET) = KORD(IA)
      ICNT(2,JTET) = KORD(IB)
      ICNT(3,JTET) = KORD(ID)
      TVC(1,JTET) = TXJ+XXI
      TVC(2,JTET) = TYJ+YYI
      TVC(3,JTET) = TZJ+ZZI
C
C***** IF NECESSARY, INSERT DEBUG PRINT HERE *****
C
C=================< STEP 4.8 >=================
C********** LC CHECK **********
C
      IF(KEY.GT.2) GO TO 470
      IF(KEY.EQ.1) GO TO 450
C
      DO 420 J=1,IEB
        IF(LED(KB,J).LT.2) GO TO 430
  420 CONTINUE
      LC(IB) = LC(IB)+1
C
  430 IF(KEY.EQ.2) GO TO 470
      DO 440 J=1,IED
        IF(LED(KD,J).LT.2) GO TO 450
  440 CONTINUE
      LC(ID) = LC(ID)+1
C
  450 DO 460 J=1,IEA
        IF(LED(K,J).LT.2) GO TO 170
  460 CONTINUE
      LC(IA) = LC(IA)+1
      GO TO 150
C
  470   IC = IB
        IB = ID
        IEB = IED
        KB = KD
        NV = NZ
        IR = JR
        GO TO 260
C
C********** PRINT ERROR CORD ****************************
 4200 WRITE(6,6000) NERR
      IDSPL = IDSPL+1
      IF(IDSPL.GT.10)  STOP
C
C********** REMOVAL OF DEGENERACY ***********************
C    ***** RANDOM DISPLACEMENT OF PARTICLES
C     ==========================================
      DO 4300 K=1,NMX
      L=KORD(K)
      CALL RAND (XR,YR,ZR,IX,IRAND)
C
      DX=(2.*XR-1.)*DSPL
      DY=(2.*YR-1.)*DSPL
      DZ=(2.*ZR-1.)*DSPL
      X0(L)=X0(L)+DX
      Y0(L)=Y0(L)+DY
      Z0(L)=Z0(L)+DZ
      IORD(K)=L
 4300 CONTINUE
C     ==========================================
      L  = 1
      DO 8100  K=1,NMX
        J  = IORD(K)
        IF(J.NE.I) THEN
          RR = X0(K)*X0(K)+Y0(K)*Y0(K)+Z0(K)*Z0(K)
          LW = LW+1
         IF(L.GT.2) THEN
           WK = DSQ(LW-1)
 8010     CONTINUE
          IF(RR.GE.WK) GO TO 8011
            KORD(LW) = KORD(LW-1)
            DSQ(LW)  = WK
            LW = LW-1
            WK = DSQ(LW-1)
            GO TO 8010
 8011     CONTINUE
         ENDIF
          DSQ(LW) = RR
          KORD(LW)= J
          L=L+1
        ENDIF
 8100 CONTINUE
      GO TO 8500
 6000 FORMAT(11X,10I10)
 6001 FORMAT(1X)
C***********************************************************
C
C***** CHECK WHETHER THE POLYHEDRON IS COMPLETELY OBTAINED *****
C
  480 CONTINUE
*
      IF (IBOUND .NE. 1) THEN
        RMAX = 0.0D0
        DO 485 J=1,JTET
          DX = TVC(1,J)-XXI
          DY = TVC(2,J)-YYI
          DZ = TVC(3,J)-ZZI
          RR = DX*DX+DY*DY+DZ*DZ
          IF(RMAX.LT.RR) RMAX=RR
  485   CONTINUE
C
        IF(4.00D0*RMAX.LT.DSQ(NMX)) GO TO 500
c        stop 'error'
      END IF
  490   CONTINUE
      IF (IBOUND .NE. 1) THEN
c        stop 'error'
        INCMP = INCMP+1
        NMX = NMX+10
        RCUT = RCUT*1.1
        RRC  = RRC *1.21
        IF(INCMP.LT.10) GO TO 8300
        WRITE(6,691) I,INCMP
  691   FORMAT(/1H ,10X,'***** ERROR IN '
     $                      ,'CONSTRUCTION OF POLYHEDRON *****'
     $                  ,10X,'I=',I5,2X,'INCMP=',I5/)
        WRITE(6,690) I,(L,KORD(L),X(L),Y(L),Z(L),DSQ(L),L=1,NMX)
        STOP 485
      END IF
C
C********** END OF << STEP  4 >>  **********
C
C     =========(THE POLYHEDRON IS CORRECTLY OBTAINED)========
C
C================<< STEP   5 >>================
  500 CONTINUE
#if 1
C
C    ***** CLEAR AREA *****
      DO 510 J=1,20
  510 NFF(J) = 0
*
      NMX = NS
C
C***** COMPUTATION OF SURFACE AREA AND VOLUME OF POLYHEDRON *****
C
      SPOL = 0.0D0
      VPOL = 0.0D0
      DO 520 K=2,JO1
        IA  = JORD(K)
        IEA = IE(IA)
        NBR(K) = IEA
        IF(IEA.LE.20)  NFF(IEA) = NFF(IEA)+1
        NORD(K) = KORD(IA)
        DIST(K) = SQRT(DSQ(IA))
C
C       ======================================================
*       CALL PLYGNA(CX(1,K),CY(1,K),CZ(1,K),MT(1,1,K),IEA,SPK)
        CALL PLYGNA(CX,CY,CZ, MT, K,IEA,SPK)
C       ======================================================
C
        SP(K)= SPK
        SPOL = SPOL+SPK
        VPK  = SPK*DIST(K)/6.0D0
        VPOL = VPOL+VPK
  520 CONTINUE
      VPR  = VPOL/SPV
      SPR  = SPOL/SPA
      TOTVOL= TOTVOL+VPOL
      NF = JO1-1
C
C    ***** OUTPUT *****
C
      IF(.false.) then
      IF(ILIST.NE.0) THEN
        MP = LP/50
        IF(LP.EQ.MP*50) THEN
          MP = MP+1
          WRITE(6,610) MP
  610             FORMAT(//1H ,124X,'PAGE',I4/)
          WRITE(6,620)
  620             FORMAT(4X,'N',7X,'F',7X,'V',7X,'DIST(1)'
     $                         ,7X,' N3 N4 N5----',22X
     $                         ,'SPEC.AREA',15X,'SPEC.VOL.'
     $                         ,5X,'NDSPL NCMP JRANGE' )
        ENDIF
C
        IF(LP.EQ.LP/10*10) WRITE(6,640)
  640                              FORMAT(1X)
C
        WRITE(6,600) I,NF,JTET,DIST(2),(NFF(J),J=3,12),SPR,VPR
     $    ,IDSPL,INCMP,JRANGE
  600            FORMAT(1H ,I5,2I8,1PE17.5,2X,1H(,10I3,2H ),E14.5,10X,
     $                     1PE14.5,3I6)
        LP = LP+1
C
        IF(ILIST.EQ.2) THEN
C
          WRITE(6,630)  (NORD(L),DIST(L),NBR(L),SP(L),L=2,JO1)
  630       FORMAT((5X, 4(1H<, I4, 1H>, 0P, F8.4, I5, 1PE11.3) ))
C
          WRITE(6,631)  (TV(L),(ICNT(NN,L),NN=1,3),(TVC(NN,L),NN=1,3)
     $                   ,L=1,JTET)
  631       FORMAT((2X, 2(1P, E14.5, 1H(, 3I5, 1H), 0P, 3F10.5, 2X) ))
C
          WRITE(6,632)
  632             FORMAT(/1H )
        ENDIF
      ENDIF
      endif
*
C***** OUTPUT INTO FILE(1) *****
C
C    ======================================================
      IF(IFILE.NE.0) THEN
        IF (IFILE .EQ. 1) THEN
           WRITE(1) I,JO1,NF,JTET,(NFF(KFN),KFN=3,14)
     &      ,SPOL,SPR,VPOL,VPR
     &      ,(NORD(L),JORD(L),DIST(L),NBR(L),SP(L),L=2,JO1)
     &      ,(TV(L),HC(L),L=1,JTET)
     &      ,((ICNT(NN,L),NN=1,3),L=1,JTET)
        ELSE
           WRITE(1,*) I,JO1,NF,JTET,(NFF(KFN),KFN=3,14)
     &      ,SPOL,SPR,VPOL,VPR
     &      ,(NORD(L),JORD(L),DIST(L),NBR(L),SP(L),L=2,JO1)
     &      ,(TV(L),HC(L),L=1,JTET)
     &      ,((ICNT(NN,L),NN=1,3),L=1,JTET)
        END IF
      END IF
C    ======================================================
C
#endif
 1000 CONTINUE
 9999 CONTINUE
      TT11 = rtc()
      print *, "spend", TT11-TT00, " seconds NXN=", NXN
      print *, "rate: ", NP*NXN/(TT11-TT00), "cell/sec"
 9000 CONTINUE
      WRITE(6,662)  TOTVOL,TVOL
  662 FORMAT(/1H ,10X,'TOTAL VOLUME OF POLYHEDRA =',F12.5
     $            ,5X,'   VOLUME OF ORIGINAL BOX =',F12.5 )
      STOP
      END
*
      SUBROUTINE SPHERE(I,J,K,XC,YC,ZC,RR)
C***********************************************************************
C      CIRCUMSCRIBING CIRCLE OF TETRAHEDRON ORIGIN,I,J,K
C      X(I)*XC+Y(I)*YC+Z(I)*ZC=DSQ(I)*0.5
C         SAME FOR J AND K
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
*
      PARAMETER (NSW = 300)
*
      COMMON /XYZ/ X(NSW),Y(NSW),Z(NSW),DSQ(NSW)
*
      XI=X(I)
      YI=Y(I)
      ZI=Z(I)
      DI=DSQ(I)
      XJ=X(J)
      YJ=Y(J)
      ZJ=Z(J)
      DJ=DSQ(J)
   20 XK=X(K)
      YK=Y(K)
      ZK=Z(K)
      DK=DSQ(K)
      D=XI*YJ*ZK+XJ*YK*ZI+XK*YI*ZJ-XK*YJ*ZI-XI*YK*ZJ-XJ*YI*ZK
      IF(D.EQ.0.0D0) GO TO 40
      D=0.50D0/D
      XC=DI*YJ*ZK+DJ*YK*ZI+DK*YI*ZJ-DK*YJ*ZI-DI*YK*ZJ-DJ*YI*ZK
      XC=XC*D
      RR=XC*XC
      YC=XI*DJ*ZK+XJ*DK*ZI+XK*DI*ZJ-XK*DJ*ZI-XI*DK*ZJ-XJ*DI*ZK
      YC=YC*D
      RR=RR+YC*YC
      ZC=XI*YJ*DK+XJ*YK*DI+XK*YI*DJ-XK*YJ*DI-XI*YK*DJ-XJ*YI*DK
      ZC=ZC*D
      RR=RR+ZC*ZC
      RETURN
   40 CONTINUE
      RETURN
      END
*
      SUBROUTINE TTRVOL(K,I,J,VL)
C
C***********************************************************************
C     COMPUTATION OF TETRAHEDRON VOMLUME
C***********************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
*
      PARAMETER (NSW = 300)
*
      COMMON /XYZ/ X(NSW),Y(NSW),Z(NSW),DSQ(NSW)
*
      XK=X(K)
      YK=Y(K)
      ZK=Z(K)
      XI=X(I)
      YI=Y(I)
      ZI=Z(I)
      VL= ABS((YK*ZI-ZK*YI)*X(J)+(ZK*XI-XK*ZI)*Y(J)
     1           +(XK*YI-YK*XI)*Z(J))/6.0D0
      RETURN
      END
      SUBROUTINE PLANE(I,J,A,B,C)
C***********************************************************************
C      COEFFICIENTS A,B,C OF PLANE THROUGH 3-POINTS ORIGIN, I AND J
C          A*X+B*Y+C*Z=0.
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
*
      PARAMETER (NSW = 300)
*
      COMMON /XYZ/ X(NSW),Y(NSW),Z(NSW),DSQ(NSW)
*
      A=Y(I)*Z(J)-Z(I)*Y(J)
      B=Z(I)*X(J)-X(I)*Z(J)
      C=X(I)*Y(J)-Y(I)*X(J)
      RETURN
      END
      SUBROUTINE TRGL12(J,RR)
C***********************************************************************
C      RR --- SQUARE OF RADIUS OF CIRCUMSCRIBING CIRCLE OF TRIANGL 1-2-J
C      HERE,X(1),Y(1),Z(1) IS USED AS WORK AREA.
C      DSQ(1) HAS BEEN SET TO 0.
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
*
      PARAMETER (NSW = 300)
*
      COMMON /XYZ/ X(NSW),Y(NSW),Z(NSW),DSQ(NSW)
*
      CALL PLANE(2,J,X(1),Y(1),Z(1))
      CALL SPHERE(2,J,1,XC,YC,ZC,RR)
      RETURN
      END
*
*     SUBROUTINE PLYGNA(XP,YP,ZP,MT,NT,PA)
      SUBROUTINE PLYGNA(XP,YP,ZP, MT, K,NT,PA)
C
C***********************************************************************
C     COMPUTATION OF AREA OF POLYGON
C***********************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
*
      PARAMETER (NVMX = 80)
      PARAMETER (NFMX = 60)
*
      DIMENSION MT(2,NFMX,NVMX)
      DIMENSION XP(NFMX,NVMX),YP(NFMX,NVMX),ZP(NFMX,NVMX)
*
      X1=XP(1,K)
      Y1=YP(1,K)
      Z1=ZP(1,K)
      PA=0.0D0
      L=1
      NRJ=MT(2,1,K)
   10 DO 40 I=2,NT
      J=1
      IF(NRJ.EQ.MT(J,I,K)) GO TO 20
      J=2
      IF(NRJ.NE.MT(J,I,K)) GO TO 40
   20 J=3-J
      L=L+1
      NRJ=MT(J,I,K)
      IF(L.LE.2) GO TO 30
      PX=QX
      PY=QY
      PZ=QZ
      A=B
   30 QX=XP(I,K)-X1
      QY=YP(I,K)-Y1
      QZ=ZP(I,K)-Z1
      B=SQRT(QX*QX+QY*QY+QZ*QZ)
      IF(L.LE.2) GO TO 40
      RX=QX-PX
      RY=QY-PY
      RZ=QZ-PZ
      C=SQRT(RX*RX+RY*RY+RZ*RZ)
      TA=(A+B+C)*(-A+B+C)*(A-B+C)*(A+B-C)
      TA=0.25D0*SQRT(TA)
      PA=PA+TA
      IF(L.EQ.NT) GO TO 50
   40 CONTINUE
      GO TO 10
   50 IF(NRJ.EQ.MT(1,1,K)) RETURN
      DO 60 J=1,2
   60 WRITE(6,600) (MT(J,I,K),I=1,NT)
      STOP
  600 FORMAT(11X,20I5)
      END
*
      SUBROUTINE BPLANE (J,A,B,C,D)
C
C***********************************************************************
C      EQUATION OF BISECTING PLANE BETWEEN (0) AND (J).
C         A*X + B*Y + C*Z = D
C***********************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
*
      PARAMETER (NSW = 300)
*
      COMMON /XYZ/ X(NSW),Y(NSW),Z(NSW),DSQ(NSW)
C
      A=X(J)
      B=Y(J)
      C=Z(J)
      D=0.5*DSQ(J)
      RETURN
      END
*
      SUBROUTINE RAND (XR,YR,ZR,IX,IR)
C
C***********************************************************************
C      UNIFORM RANDOM NUMBER GENERATION
C       0.0  <  XR < 1.0
C  [NOTE : IN CASE A PHYSICAL RANDOM NUMBER GENERATOR IS NOT AVAILABLE,
C             USE THE SUBROUTINE <URAND(N,IX)>                         ]
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      COMMON /URANAR/ RX(3000)
C
      IF(IR.LE.0 .OR. IR.GE.2998)  THEN
        CALL URAND(3000,IX)
        IR=1
      ENDIF
      XR=RX(IR)
      YR=RX(IR+1)
      ZR=RX(IR+2)
      IR=IR+3
      RETURN
      END
*
      SUBROUTINE URAND (N,IX)
C
C***********************************************************************
C        UNIFORM RANDOM NUMBER GENERATOR  (0.0 < RX < 1.0)
C        N   RANDOM NUMBERS ARE STORED IN THE BUFFER RX(1),...,RX(N)
C   FUNCTION            - GENERATE THE BASIC UNIFORM (0,1) PSEUDO
C                           RANDOM NUMBERS.
C
C   ARGUMENTS  N        - INPUT. NUMBER OF RANDOM NUMBERS TO GENERATE
C                           (N>=1).
C              IX       - INPUT. AN INITIAL VALUE OF UNIFORM PSEUDO
C                           RANDOM NUMBERS (IX>=0).
C                       - OUTPUT. THE LAST GENERATED VALUE OF UNIFORM
C                           PSEUDO-RANDOM NUMBERS.
C              RX(N)     - OUTPUT. GENERATED RANDOM NUMBERS.
C***********************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      REAL*4 BNM31
******* BNM31 SHOULD BE SINGLE PRECISION (HEXA-DECIMAL) 1989/08/30
      DATA IBP31M,BNM31/2147483647,'39200000'X/
      DATA IVURN,IFP11/584287,48828125/
      COMMON /URANAR/ RX(3000)
C
      IF (IX.EQ.0) IX=IVURN
      DO 30 I=1,N
         IX=IX*IFP11
         IF (IX) 10,20,20
   10    IX=(IX+IBP31M)+1
   20    RX(I)=FLOAT(IX)*BNM31
   30 CONTINUE
      RETURN
      END
      SUBROUTINE MIRROR (IM, XC,YC,ZC, XD,YD,ZD, BX,BY,BZ)
C
C     *******************************************
C     *                                         *
C     *   MIRROR IMAGE CONSTRUCTION             *
C     *      CENTRE ATOM  (XC,YC,ZC)            *
C     *      IMAGE ATOM   (XD,YD,ZD)            *
C     *          : WITH RESPECT TO THE          *
C     *            BOUNDARY <IM>                *
C     *                                         *
C     *******************************************
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      XD = 0.0D0
      YD = 0.0D0
      ZD = 0.0D0
      IF(IM .EQ. 1) XD = -2.0D0 * XC
      IF(IM .EQ. 2) XD =  2.0D0 * (BX - XC)
      IF(IM .EQ. 3) YD = -2.0D0 * YC
      IF(IM .EQ. 4) YD =  2.0D0 * (BY - YC)
      IF(IM .EQ. 5) ZD = -2.0D0 * ZC
      IF(IM .EQ. 6) ZD =  2.0D0 * (BZ - ZC)
      RETURN
      END
